#!/bin/bash

check_dest() {
    check_src="$(abspath "$1")"
    check_destpath="$(abspath "$2")"
    if [ "$move" -eq 1 ]; then
        if [ -h "$check_destpath" ] || [ -e "$check_destpath" ]; then
            echo >&2 "Error: $2 already exists, cannot move $1 there"
            return 1
        fi
    else
        check_dest_parent="$(dirname "$dest")"
        if [ -h "$check_destpath" ]; then
            if ! [ "$check_destpath" -ef "$check_src" ]; then
                oldcheck_destpath="$(cd "$check_dest_parent" && abspath "$(readlink "$check_destpath")")"
                if [ "$oldcheck_destpath" != "$check_src" ]; then
                    echo >&2 "Error: $check_destpath exists but points to $oldcheck_destpath, not $check_src"
                    return 1
                fi
            fi
        elif [ -e "$check_destpath" ]; then
            echo >&2 "Error: $check_destpath already exists, cannot update to $check_src"
        fi
    fi
    return 0
}

# shellcheck source=./common-music.sh
. "$(dirname "$0")/common-music.sh"
# shellcheck source=./trap.sh
. "$(dirname "$0")/trap.sh"

tmpdir="$(mktemp -d -t "${0##*/}.XXXXXX")" || exit 1
case "$BASH_VERSION" in
    '')
        trap 'rm -rf "$tmpdir"; on_exit' EXIT
        ;;
    *)
        trap 'rm -rf "$tmpdir"' EXIT
        ;;
esac
trap 'rm -rf "$tmpdir"' INT TERM
audiofiles="$tmpdir/audiofiles"

set -e

PATH="$(cd "$(dirname "$0")" && pwd):$PATH"

prefix=
broadcastsdir=${prefix}Broadcasts
albumsdir=${prefix}Albums
extrasdir="${prefix}Albums With Extra Tracks"
incompletedir="${prefix}Incomplete Albums"
singlesdir=${prefix}Singles
singletracksdir="${prefix}Single Tracks"
samplersdir="${prefix}Samplers"
# Genres that get their own toplevel directories to ease navigation
# Game and Soundtrack also get flattened, as I rarely browse them by artist
hoistedgenresdir="${prefix}%s Albums"
hoisted_genres="Game|Soundtrack|Christmas|Classical"
flattened_genres="Game|Soundtrack"
flattened_dirs="$samplersdir"

# Games with data tracks and amazon albums whose videos and booklets are
# counted in the track total. This blacklist only allows one track to be
# missing at this time.
incomplete_blacklist="Descent Mac Game Soundtrack|Shadow Warrior|Fantasy General|Stargunner Original Soundtrack|King's Quest VI Heir Today, Gone Tomorrow|Command & Conquer： Red Alert： Counterstrike|Command & Conquer： Tiberian Dawn： Covert Operations|Warcraft II： Tides of Darkness|Total Annihilation|Moto Racer|Return to Zork|Quake|Hexen II|.*\\[\\+video\\]|.*\\[\\+Digital Booklet\\]"
soundtrack_blacklist="Soundtrack For The Voices In My Head.*"

usage() {
    cat >&2 <<END
${0##*/} [options] LIBRARY_DIR [LIBRARY_DIR..]

Options:
    -o DESTDIR    Link/move files to DESTDIR (default: \$PWD)
    -r LIBRARY_ROOT  Explicitly specify library root to determine relative paths
    -v    Verbose output
    -i    Link tracks individually rather than album folders
    -H    Hard link tracks rather than soft link (only useful with -i)
    -m    Move/rename instead of linking
    -d    Assume multi-disc albums are separated one disc per folder
    -n    Dry-run. Pretend to work, but don't make the changes
    -S    Disable flattening of single tracks
    -D    Disable all separation (useful for dupe checking)
END
    exit 2
}

destdir=.
library_root=
verbose=0
individual=0
hard_link_individual=0
move=0
separated_disc_folders=0
dry_run=0
flatten_single_tracks=1
separate=1
while getopts o:r:viHmdnSDh opt; do
    case "$opt" in
        o)
            destdir="$(abspath "$OPTARG")"
            ;;
        r)
            library_root="$(abspath "$OPTARG")"
            ;;
        v)
            verbose=1
            ;;
        i)
            individual=1
            ;;
        H)
            hard_link_individual=1
            ;;
        m)
            move=1
            ;;
        d)
            separated_disc_folders=1
            ;;
        n)
            dry_run=1
            ;;
        S)
            flatten_single_tracks=0
            ;;
        D)
            separate=0
            flatten_single_tracks=0
            ;;
        \? | h)
            usage
            ;;
    esac
done
shift $((OPTIND - 1))

if [ $# -eq 0 ]; then
    set -- .
fi

linkarg=
if [ $hard_link_individual -eq 0 ]; then
    linkarg=-sr
elif [ $individual -eq 0 ]; then
    echo >&2 "Warning: -H has no effect without -i"
fi

if [ $move -eq 1 ]; then
    link() {
        if [ -h "$dest" ] || [ -e "$dest" ]; then
            echo >&2 "Error: $2 already exists, cannot move $1 there"
            return 1
        fi
        mv "$@"
    }
else
    if command -v gln >/dev/null 2>&1; then
        link() {
            check_dest "$@" || return $?
            if [ -h "$2" ]; then
                rm -f "$2"
            fi
            gln "$linkarg" "$@"
        }
    else
        link() {
            check_dest "$@" || return $?
            if [ -h "$2" ]; then
                rm -f "$2"
            fi
            ln "$linkarg" "$@"
        }
    fi
fi

preparebar 40
totaldir=$#
for library_dir; do
    library_dir="$(abspath "$library_dir")"
    if [ "$library_dir" = "$(pwd -P)" ]; then
        # Don't recurse into ourselves
        continue
    fi
    curdir=1
    music_find "$library_dir" \
        | sed -e 's#\(.*\)/.*#\1#' \
        | sort -uf >"$tmpdir/dirs"
    totaldir=$(wc -l <"$tmpdir/dirs" | xargs)
    clearbar
    while read -r dir; do
        if [ $verbose -eq 0 ]; then
            clearbar
        fi
        progressbar "$curdir" "$totaldir" "${library_dir##*/}" "$curdir/$totaldir"
        curdir=$((curdir + 1))
        if [ ! -e "$dir" ]; then
            continue
        fi
        dir="${dir%/}"
        base="${dir##*/}"
        music_find "$dir" >"$audiofiles"
        count="$(wc -l <"$audiofiles" | xargs)"
        if [ "$count" -lt 1 ]; then
            continue
        fi
        first="$(head -n 1 "$audiofiles")"
        eval_common_metadata "$first"

        if [ $separated_disc_folders -eq 1 ]; then
            total="$(get_album_track_total_indiv_discs "$dir" || :)"
        else
            total="$(get_album_track_total "$dir" || :)"
        fi
        genre="$(get_genre "$first" "$soundtrack_blacklist")"

        if echo "$releasetype" | tr '/,;' '   ' | grep -qwiE 'spokenword|audiobook|audio drama|interview'; then
            ddestdir="$destdir/Non-Music"
            dseparate=0
        else
            ddestdir="$destdir"
            dseparate=$separate
        fi

        if echo "$releasetype" | tr '/,;' '   ' | grep -qwi broadcast; then
            d="$broadcastsdir"
        elif [ -z "$total" ]; then
            if [ "$count" -gt 1 ]; then
                d="$albumsdir"
            else
                d="$singletracksdir"
            fi
        elif [ "$count" -eq "$total" ]; then
            if echo "$releasetype" | tr '/,' '  ' | grep -qwi single \
                || [ "$total" -eq 1 ] || echo "$base" | grep -qiw Single; then
                d="$singlesdir"
            else
                d="$albumsdir"
            fi
        elif [ "$count" -gt "$total" ]; then
            # The most common case is multiple discs
            # find "$dir/" -not -name ._\* \( -iname \*.flac -o -iname \*mp3 -o -iname \*.m4a -o -iname \*.ogg \)
            d="$extrasdir"
        elif [ "$total" -eq 1 ]; then
            # Shouldn't be possible to get here
            echo >&2 "Error: total is 1, but count is less than 1"
            exit 1
            d="$singletracksdir"
        else
            if [ "$count" -gt "1" ]; then
                if [ "$count" -eq $((total - 1)) ] && echo "$base" | grep -qEx "$incomplete_blacklist"; then
                    d="$albumsdir"
                else
                    # Possibly screwed up, or an incomplete album
                    d="$incompletedir"
                fi
            else
                d="$singletracksdir"
            fi
        fi

        rel="$(relpath "$dir" "${library_root:-$library_dir}")"
        if [ "$d" = "$singletracksdir" ] \
            && [ $flatten_single_tracks -eq 1 ] \
            && ! (
                [ -n "$hoisted_genres" ] \
                    && echo "$genre" | grep -Eqx "$hoisted_genres"
            ); then

            if [ $verbose -eq 1 ]; then
                clearbar
                echo "$rel: $count / $total -> ${ddestdir#$destdir/}/$d"
            fi

            dest="$ddestdir/$d"
            if [ $dry_run -eq 0 ]; then
                mkdir -p "$dest"
            fi
            ext="${first##*.}"
            if [ -z "$artist" ]; then
                artist="[unknown]"
            fi
            newfirst="$(fn_sanitize "$artist - $title.$ext")"
            if [ $dry_run -eq 0 ]; then
                link "$first" "$dest/$newfirst" || continue
            fi
        else
            dest=

            if [ $dseparate -eq 0 ]; then
                d=.
            else
                if echo "$base" | grep -qwi sampler; then
                    d="$samplersdir"
                fi

                case "$base" in
                    The\ *)
                        base="${base#The }, The"
                        rel="${rel%/*}/$base"
                        ;;
                esac

                if [ -n "$hoisted_genres" ] || [ -n "$flattened_genres" ]; then
                    if [ -n "$hoisted_genres" ] \
                        && echo "$genre" | grep -Eqx "$hoisted_genres"; then
                        # shellcheck disable=SC2059
                        d="$(printf "$hoistedgenresdir" "$genre")"
                        if [ -n "$flattened_genres" ] \
                            && echo "$genre" | grep -Eqx "$flattened_genres"; then
                            dest="$d/$base"
                        fi
                    fi
                fi
            fi

            if [ $verbose -eq 1 ]; then
                clearbar
                echo "$rel: $count / $total -> ${ddestdir#$destdir/}/$d"
            fi

            if echo "$d" | grep -Eqx "$flattened_dirs"; then
                dest="$d/$base"
            elif [ -z "$dest" ]; then
                dest="$d/$rel"
            fi
            dest="$ddestdir/$dest"

            if [ $individual -eq 1 ]; then
                if [ $dry_run -eq 0 ]; then
                    mkdir -p "$dest"
                fi
                while read -r fn; do
                    if [ $dry_run -eq 0 ]; then
                        link "$fn" "$dest/${fn##*/}" || continue
                    fi
                done <"$audiofiles"
            else
                dest_parent="$(dirname "$dest")"
                if [ $dry_run -eq 0 ]; then
                    mkdir -p "$dest_parent"
                fi
                if [ $dry_run -eq 0 ]; then
                    link "$dir" "$dest" || continue
                fi
            fi

        fi
    done <"$tmpdir/dirs"
    echo
done
