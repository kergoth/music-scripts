#!/bin/sh
# shellcheck disable=SC2002

set -e

# shellcheck source=./common.sh
. "$(dirname "$0")/common.sh"
# shellcheck source=./trap.sh
. "$(dirname "$0")/trap.sh"

usage() {
    cat >&2 <<END
$scriptname [-h]
END
    exit 2
}

process_args() {
    while getopts h opt; do
        case "$opt" in
            \? | h)
                usage
                ;;
        esac
    done
    shift $((OPTIND - 1))
}

max_discs=5
TAB=$(printf '\t')
list_track_file_candidates() {
    # id="$1"
    # album_artist="$2"
    # album="$3"
    # discnumber="$4"
    # tracknumber="$5"
    # artist="$6"
    # name="$7"
    # info "$*"
    list_track_album_dir_candidates | while read -r album_dir; do
        find "$album_dir" -iname "$tracknumber - $name.*"
        find "$album_dir" -iname "$tracknumber - $artist - $name.*"
    done
}

list_track_album_dir_candidates() {
    for library_dir in ./*/; do
        for dartist in "$album_artist" "Various Artists" "Compilations"; do
            if [ -d "$library_dir/$dartist/$album" ]; then
                echo "$library_dir/$dartist/$album"
                continue
            fi
            for disc in $(seq 1 "$max_discs"); do
                if [ -d "$library_dir/$dartist/Disc $disc" ]; then
                    echo "$library_dir/$dartist/Disc $disc"
                else
                    ls="$(ls -1d "$library_dir/$dartist/Disc $disc: "* 2>/dev/null || :)"
                    if [ -n "$ls" ]; then
                        echo "$ls"
                    else
                        break
                    fi
                fi
            done
        done
    done
}

find_track() {
    list_track_album_dir_candidates | while read -r album_dir; do
        find "$album_dir" -iname "$tracknumber - $name.*"
        find "$album_dir" -iname "$tracknumber - $artist - $name.*"
    done | head -n 1
}

process_playlists() {
    for playlist; do
        info "Playlist: $playlist"
        plist-to-json "$playlist" >"$tmpdir/playlist.json"
        # FIXME: do the join on this in jq itself
        cat "$tmpdir/playlist.json" \
            | jq '.[0].Playlists[0]["Playlist Items"] | .[]."Track ID"' >"$tmpdir/trackids"
        cat "$tmpdir/playlist.json" \
            | jq '.[].Tracks | .[] | [."Track ID", ."Album Artist", .Album, ."Disc Number", ."Track Number", .Artist, .Name] | join("\t")' -r | sort -n >"$tmpdir/tracks"
        info "Track IDs: $(cat "$tmpdir/trackids" | xargs)"
        outname="${playlist##*/}"
        outname="${outname%.xml}"
        cat "$tmpdir/trackids" \
            | while read -r id; do
                grep "^$id$TAB" "$tmpdir/tracks"
            done \
            | sed -e 's/		/	 	/' \
            | while IFS="$TAB" read -r id album_artist album discnumber tracknumber artist name; do
                info "Track $id: $album_artist/$album Disc $discnumber/$tracknumber - $artist - $name"
                track="$(find_track)"
                if [ -n "$track" ]; then
                    echo "$track" | sed -e 's#\./##; s#//#/#g; s#/#\\#g'
                else
                    printf 'Missing_Track\\%s\\%s\\%s - %s - %s.mp3\n' "$album_artist" "$album" "$tracknumber" "$artist" "$name"
                fi
            done >"$outname.m3u"
        if [ -s "$outname.m3u" ]; then
            info "Wrote $outname.m3u"
        else
            rm -f "$outname.m3u"
        fi
    done
}

main() {
    process_args "$@" || die
    shift $((OPTIND - 1))
    verbose=1

    tmpdir=$(mktemp -d -t "${0##*/}.XXXX")
    case "$BASH_VERSION" in
        '')
            trap 'rm -rf "$tmpdir"; on_exit' EXIT
            ;;
        *)
            trap 'rm -rf "$tmpdir"' EXIT
            ;;
    esac
    trap 'rm -rf "$tmpdir"; trap - INT; kill -INT 0' INT
    trap 'rm -rf "$tmpdir"; trap - TERM; kill -TERM 0' TERM

    process_playlists "$@"

    # stdouttest=$(run echo output)
    # assert "$stdouttest" = output
    # info "PID: $$"
    # run sleep 15

    wait
}

if [ "$scriptname" = "playlists_from_itunes" ]; then
    main "$@"
fi
