#!/bin/bash
# shellcheck disable=SC2154,SC2188

# shellcheck source=./common-music.sh
. "$(dirname "$0")/common-music.sh"
# shellcheck source=./trap.sh
. "$(dirname "$0")/trap.sh"

PATH="$(cd "$(dirname "$0")" && pwd):$PATH"

set -e

usage() {
    cat >&2 <<END
${0##*/} [options] SOURCE_DIR [SOURCE_DIR..]

Options:
    -o OUTDIR  Specify output directory
    -t    Convert 'The ' prefix to ', The' suffix
    -n    Dry run
    -d    Separate discs into their own folders
END
    exit 2
}

alias link='ln -fv'

if [ $# -eq 0 ]; then
    set -- .
fi

outdir=
dry_run=0
separate_discs=
suffix_the=
while getopts to:ndh opt; do
    case "$opt" in
        t)
            suffix_the=1
            ;;
        o)
            outdir="$OPTARG"
            ;;
        n)
            dry_run=1
            ;;
        d)
            separate_discs=1
            ;;
        \? | h)
            usage
            ;;
    esac
done
shift $((OPTIND - 1))

if [ $# -eq 0 ]; then
    usage
fi

tmpdir=$(mktemp -d -t "${0##*/}.XXXX") || exit $?
case "$BASH_VERSION" in
    '')
        trap 'rm -rf "$tmpdir"; on_exit' EXIT
        ;;
    *)
        trap 'rm -rf "$tmpdir"' EXIT
        ;;
esac
trap 'rm -rf "$tmpdir"; pkill -P $$; wait; trap - INT; kill -INT 0' INT
trap 'rm -rf "$tmpdir"; pkill -P $$; wait; trap - TERM; kill 0' TERM

audiofiles="$tmpdir/audiofiles"

get_newfn() {
    (
        eval_common_metadata "$1"
        if [ -z "$artist" ] && [ -z "$title" ] && [ -z "$tracknumber" ]; then
            # shellcheck disable=SC2031
            echo >&2 "Error: no useful tags for $fn, skipping"
            return 1
        fi
        get_new_filename ${separate_discs:+-d} ${suffix_the:+-t} "$1" "$2"
    )
}

re_escape() {
    python3 -c 'import re,sys; print("\n".join(re.escape(a) for a in sys.argv[1:]))' "$@"
}

is_macos=0
# shellcheck disable=SC2032
case "$OSTYPE" in
    darwin*)
        is_macos=1
        ;;
esac

rename() {
    if [ $is_macos -eq 1 ]; then
        lower_one="$(echo "$1" | tr '[:upper:]' '[:lower:]')"
        lower_two="$(echo "$2" | tr '[:upper:]' '[:lower:]')"
        if [ "$lower_one" = "$lower_two" ]; then
            # Only difference between the two is case, and most filesystems on
            # macOS are case-insensitive, so skip the pointless mv
            return
        fi
    fi
    mv -v "$1" "$2"
}

TAB=$(printf '\t')
preparebar 40
for source_dir; do
    if [ ! -e "$source_dir" ]; then
        continue
    fi
    source_dir="${source_dir%/}"
    if [ -n "$outdir" ]; then
        soutdir=$outdir
    else
        soutdir="$source_dir"
    fi
    music_find "$source_dir" | sed -e "s#\\(.*\\)/\\(.*\\)#\\1${TAB}\\2#" >"$audiofiles"
    cut -d"$TAB" -f1 "$audiofiles" | sort -u >"$tmpdir/albumdirs"
    >"$tmpdir/explicit_albums"
    filecount=$(wc -l <"$tmpdir/albumdirs" | xargs)
    curcount=0

    # shellcheck disable=SC2002
    while read -r albumdir; do
        curcount=$((curcount + 1))
        clearbar
        progressbar "$curcount" "$filecount" "${source_dir##*/}" "$curcount/$filecount    "
        newalbumdir="$albumdir"

        grep -E "^$(re_escape "$albumdir")$TAB" "$audiofiles" 2>/dev/null \
            | cut -d"$TAB" -f2 >"$tmpdir/albumfiles"
        grep "^$albumdir$TAB" "$audiofiles" 2>/dev/null \
            | cut -d"$TAB" -f2 >>"$tmpdir/albumfiles"
        sort -u "$tmpdir/albumfiles" >"$tmpdir/albumfiles.new" \
            && mv "$tmpdir/albumfiles.new" "$tmpdir/albumfiles"
        >"$tmpdir/filestomove"

        while read -r basefn; do
            fn="$albumdir/$basefn"

            eval_common_metadata "$fn"
            if [ -z "$artist" ] && [ -z "$title" ] && [ -z "$tracknumber" ]; then
                # shellcheck disable=SC2031
                echo >&2 "Error: no useful tags for $fn, skipping"
                continue
            fi

            newfn="$(get_new_filename ${separate_discs:+-d} ${suffix_the:+-t} "$fn" "$soutdir")"
            if [ -z "$newfn" ]; then
                echo >&2 "Error: unable to determine new filename for $fn, skipping"
                continue
            elif [ "$(echo "$newfn" | wc -l | xargs)" -ne 1 ]; then
                echo >&2 "Error: invalid new fn $newfn for $fn, skipping"
                continue
            fi

            newalbumdir="$(dirname "$newfn")"
            if [ "$itunesadvisory" = 1 ]; then
                newfn="${newfn%.*} (Explicit).${newfn##*.}"
                echo "$newalbumdir" >>"$tmpdir/explicit_albums"
            elif [ "$itunesadvisory" = 2 ]; then
                newfn="${newfn%.*} (Clean).${newfn##*.}"
            fi

            printf '%s\t%s\n' "$fn" "$newfn" >>"$tmpdir/filestomove"
        done <"$tmpdir/albumfiles"

        if grep -qx "$newalbumdir" "$tmpdir/explicit_albums"; then
            newalbumdir="$newalbumdir (Explicit)"
        fi

        if [ "$albumdir" != "$newalbumdir" ]; then
            mkdir -p "$newalbumdir"
            # Non-audio files
            nonmusic_find "$albumdir" \
                | while read -r efn; do
                    newefn="$newalbumdir/${efn##*/}"
                    if [ $dry_run -eq 1 ]; then
                        echo "$efn -> $newefn"
                    else
                        rename "$efn" "$newefn"
                    fi
                done
        fi

        while IFS="$TAB" read -r fn newfn; do
            newalbumdir="$(dirname "$newfn")"
            if grep -qx "$newalbumdir" "$tmpdir/explicit_albums"; then
                newalbumdir="$newalbumdir (Explicit)"
                newfn="$newalbumdir/${newfn##*/}"
            fi
            if [ "$fn" = "$newfn" ]; then
                # Nothing to do
                continue
            elif [ -e "$newfn" ] && ! [ "$fn" -ef "$newfn" ]; then
                echo >&2 "Error: $newfn already exists, cannot move $fn"
                continue
            fi
            if [ $dry_run -eq 1 ]; then
                echo "$fn -> $newfn"
            else
                rename "$fn" "$newfn"
            fi
        done <"$tmpdir/filestomove"

        if [ $dry_run -eq 0 ]; then
            remove-empty-dirs "$albumdir" >/dev/null 2>&1
        fi
    done <"$tmpdir/albumdirs"

    echo
done
