#!/bin/bash

. "$(dirname "$0")/common-music.sh"
. "$(dirname "$0")/trap.sh"

case "$BASH_VERSION" in
    '')
        trap 'rm -f $cleanfiles; on_exit' EXIT
        ;;
    *)
        trap 'rm -f $cleanfiles' EXIT
        ;;
esac

PATH="$(cd "$(dirname "$0")" && pwd):$PATH"

set -e

usage() {
    cat >&2 <<END
${0##*/} [options] SOURCE_DIR [SOURCE_DIR..]

Options:
    -o OUTDIR  Specify output directory
    -t    Convert 'The ' prefix to ', The' suffix
    -n    Dry run
    -d    Separate discs into their own folders
END
    exit 2
}


alias link='ln -fv'

if [ $# -eq 0 ]; then
    set -- .
fi

outdir=
dry_run=0
separate_discs=
suffix_the=
while getopts to:ndh opt; do
    case "$opt" in
        t)
            suffix_the=1
            ;;
        o)
            outdir="$OPTARG"
            ;;
        n)
            dry_run=1
            ;;
        d)
            separate_discs=1
            ;;
        \? | h)
            usage
            ;;
    esac
done
shift $((OPTIND - 1))

if [ $# -eq 0 ]; then
    usage
fi

audiofiles="$(mktemp -t "${0##*/}.XXXXXX")" || exit 1
otherfiles="$(mktemp -t "${0##*/}.XXXXXX")" || exit 1
cleanfiles="$audiofiles"
trap 'rm -f "$audiofiles"' INT TERM

get_newfn() {
    (
        eval_common_metadata "$1"
        if [ -z "$artist" ] && [ -z "$title" ] && [ -z "$tracknumber" ]; then
            echo >&2 "Error: no useful tags for $fn, skipping"
            continue
        fi
        get_new_filename ${separate_discs:+-d} ${suffix_the:+-t} "$1" "$2"
    )
}

preparebar 40
for source_dir; do
    if [ ! -e "$source_dir" ]; then
        continue
    fi
    source_dir="${source_dir%/}"
    if [ -n "$outdir" ]; then
        soutdir=$outdir
    else
        soutdir="$source_dir"
    fi
    music_find "$source_dir" >"$audiofiles"
    filecount=$(wc -l <"$audiofiles" | xargs)
    curcount=0
    while read -r fn; do
        curcount=$((curcount + 1))
        clearbar
        progressbar "$curcount" "$filecount" "${source_dir##*/}" "$curcount/$filecount    "
        newfn="$(get_newfn "$fn" "$soutdir")"
        if [ "$(echo "$newfn" | wc -l | xargs)" -ne 1 ]; then
            echo >&2 "Error: invalid new fn $newfn for $fn, skipping"
            continue
        elif [ -z "$newfn" ]; then
            echo >&2 "Error: unable to determine new filename for $fn, skipping"
            continue
        elif [ "$fn" != "$newfn" ]; then
            if [ -e "$newfn" ] && ! [ "$fn" -ef "$newfn" ]; then
                echo >&2 "Error: $newfn already exists, cannot move $fn"
                continue
            fi
            newfndir="$(dirname "$newfn")"
            if [ $dry_run -eq 1 ]; then
                echo "$fn -> $newfn"
            else
                fn_lower="$(echo "$fn" | tr '[:upper:]' '[:lower:]')"
                newfn_lower="$(echo "$newfn" | tr '[:upper:]' '[:lower:]')"
                if [ "$fn_lower" != "$newfn_lower" ]; then
                    mkdir -p "$newfndir"
                    mv -v "$fn" "$newfn"
                fi
            fi

            oldfndir="$(dirname "$fn")"
            if ! echo "$oldfndir" | grep -qix "$newfndir"; then
                # Non-audio files
                nonmusic_find "$oldfndir" \
                    | while read -r efn; do
                        newefn="$newfndir/${efn##*/}"
                        if ! grep -qFx "$efn" "$otherfiles" && ! [ -e "$newefn" ]; then
                            echo "$efn" >>"$otherfiles"
                            if [ $dry_run -eq 1 ]; then
                                echo "$efn -> $newefn"
                            else
                                mv -v "$efn" "$newefn"
                            fi
                        fi
                    done
            fi
        fi
    done <"$audiofiles"
    if [ $dry_run -eq 1 ]; then
        remove-empty-dirs "$source_dir" >/dev/null 2>&1
    fi
    echo
done
